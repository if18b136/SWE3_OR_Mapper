TODO decide on inheritance database style - single table, table per type - probably table per type

TODO refactor table creation - currently takes path to class as table name

TODO foreign key constraints - "before saving foreign key constraint changes save the object itself" - Lang (VO2)

Locking - singleton class for db operations, which locks itself if a db statement is sent to it, stores other sent states into a waiting room list, which will be handled after unlocking db again.
Big problem with this is that statement 1 could be "delete table x" and statement 2 could then be "insert into table x" - so this solution would need to check in before each waiting room statement if the statement is legal anymore.

TODO QUESTION: prepared statements instead of strings?
would need a way to transmit not only the prepared statement string but all different vars

TODO QUESTION: auto increment - just set it for db and then check each time for latest entry?

VO4
Entity class (type, tableName, fieldArray)
Fields class (fieldName, columnName, fieldType)
field has entity class

public list vs public Array: public list means that a user could adapt the list - could provoke unwanted behaviour - make sure that lists are read-only if not needed otherwise

TODO handle more than one field as primary key

TODO fetch pk after auto increment

auto increment can be "upgraded" manually by inserting a higher number - skips the numbers between
